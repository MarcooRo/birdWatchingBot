SCAN STARTED
Blocco numero 10092901
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,  
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'batch'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(19) [
    [String (Text): 'Send a batch of dispatch calls.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'May be called from any origin.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `calls`: The calls to be dispatched from the same origin. The number of call must not'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  exceed the constant: `batched_calls_limit` (available in constant metadata).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'If origin is root then call are dispatch without checking origin filter. (This includes'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'bypassing `frame_system::Config::BaseCallFilter`).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Complexity: O(C) where C is the number of calls to be batched.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This will return `Ok` in all circumstances. To determine the success of the batch, an'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'event is deposited. If a call failed and the batch was interrupted, then the'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`BatchInterrupted` event is deposited, along with the number of successful calls made'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'and the error of the failed call. If all were successful, then the `BatchCompleted`'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'event is deposited.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'validate'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 4 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(5) [
    [String (Text): 'Declare the desire to validate for the origin controller.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'Effects will be felt at the beginning of the next era.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be _Signed_ by the controller, not the stash.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'payout_stakers'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(2) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 18 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(21) [
    [String (Text): 'Pay out all the stakers behind a single validator for a single era.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `validator_stash` is the stash account of the validator. Their nominators, up to'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `era` may be any era between `[current_era - history_depth; current_era]`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The origin of this call must be _Signed_. Any account can call this function, even if'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'it is not one of the stakers.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Time complexity: at most O(MaxNominatorRewardedPerValidator).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Contains a limited number of reads and writes.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '-----------'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'N is the Number of payouts for the validator (including the validator)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'Weight:'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Reward Destination Staked: O(N)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Reward Destination Controller (Creating): O(N)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  NOTE: weights are assuming that payouts are made to alive stash account (Staked).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(2) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}

















Blocco numero 10092902
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'nominate'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 5 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(11) [
    [String (Text): 'Declare the desire to nominate `targets` for the origin controller.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'Effects will be felt at the beginning of the next era.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be _Signed_ by the controller, not the stash.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "- The transaction's complexity is proportional to the size of `targets` (N)"] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Both the reads and writes follow a similar pattern.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'payout_stakers'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(2) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 18 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(21) [
    [String (Text): 'Pay out all the stakers behind a single validator for a single era.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `validator_stash` is the stash account of the validator. Their nominators, up to'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `era` may be any era between `[current_era - history_depth; current_era]`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The origin of this call must be _Signed_. Any account can call this function, even if'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'it is not one of the stakers.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Time complexity: at most O(MaxNominatorRewardedPerValidator).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Contains a limited number of reads and writes.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '-----------'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'N is the Number of payouts for the validator (including the validator)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'Weight:'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Reward Destination Staked: O(N)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Reward Destination Controller (Creating): O(N)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  NOTE: weights are assuming that payouts are made to alive stash account (Staked).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(2) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Blocco numero 10092903
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Blocco numero 10092904
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'transfer_keep_alive'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(2) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 3 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(11) [
    [String (Text): 'Same as the [`transfer`] call, but with a check that the transfer will not kill the'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'origin account.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '99% of the time you want [`transfer`] instead.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '[`transfer`]: struct.Pallet.html#method.transfer'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Cheaper than transfer because account cannot be killed.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Base Weight: 51.4 µs'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '#</weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(2) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'contribute'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(3) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 1 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(2) [
    [String (Text): 'Contribute to a crowd sale. This will transfer some balance over to fund a parachain'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'slot. It will be withdrawable when the crowdloan has ended and the funds are unused.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(3) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Blocco numero 10092905
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Blocco numero 10092906
Blocco numero 10092906
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'transfer'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(2) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(28) [
    [String (Text): 'Transfer some liquid free balance to another account.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`transfer` will set the `FreeBalance` of the sender and receiver.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'It will decrease the total issuance of the system by the `TransferFee`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "If the sender's account is below the existential deposit as a result"] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'of the transfer, the account will be reaped.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Signed` by the transactor.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Dependent on arguments but not critical, given proper implementations for input config'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  types. See related functions below.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- It contains a limited number of reads and writes internally and no complex'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  computation.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'Related functions:'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  - `ensure_can_withdraw` is always called internally but has a bounded complexity.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  - Transferring balances to accounts that did not exist before will cause'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '    `T::OnNewAccount::on_new_account` to be called.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '    that the transfer will not kill the origin account.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '---------------------------------'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Base Weight: 73.64 µs, worst case scenario (account created, account removed)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- DB Weight: 1 Read and 1 Write to destination account'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Origin account is already in memory, so no DB operations for them.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(2) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'transfer'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(2) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(28) [
    [String (Text): 'Transfer some liquid free balance to another account.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`transfer` will set the `FreeBalance` of the sender and receiver.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'It will decrease the total issuance of the system by the `TransferFee`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "If the sender's account is below the existential deposit as a result"] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'of the transfer, the account will be reaped.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Signed` by the transactor.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Dependent on arguments but not critical, given proper implementations for input config'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  types. See related functions below.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- It contains a limited number of reads and writes internally and no complex'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  computation.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'Related functions:'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  - `ensure_can_withdraw` is always called internally but has a bounded complexity.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  - Transferring balances to accounts that did not exist before will cause'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '    `T::OnNewAccount::on_new_account` to be called.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '    that the transfer will not kill the origin account.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '---------------------------------'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Base Weight: 73.64 µs, worst case scenario (account created, account removed)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- DB Weight: 1 Read and 1 Write to destination account'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Origin account is already in memory, so no DB operations for them.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(2) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Blocco numero 10092907
Blocco numero 10092907
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Blocco numero 10092908
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'batch_all'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 2 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(14) [
    [String (Text): 'Send a batch of dispatch calls and atomically execute them.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The whole transaction will rollback and fail if any of the calls failed.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'May be called from any origin.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `calls`: The calls to be dispatched from the same origin. The number of call must not'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  exceed the constant: `batched_calls_limit` (available in constant metadata).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'If origin is root then call are dispatch without checking origin filter. (This includes'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'bypassing `frame_system::Config::BaseCallFilter`).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Complexity: O(C) where C is the number of calls to be batched.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'batch'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(19) [
    [String (Text): 'Send a batch of dispatch calls.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'May be called from any origin.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `calls`: The calls to be dispatched from the same origin. The number of call must not'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  exceed the constant: `batched_calls_limit` (available in constant metadata).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'If origin is root then call are dispatch without checking origin filter. (This includes'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'bypassing `frame_system::Config::BaseCallFilter`).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Complexity: O(C) where C is the number of calls to be batched.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This will return `Ok` in all circumstances. To determine the success of the batch, an'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'event is deposited. If a call failed and the batch was interrupted, then the'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`BatchInterrupted` event is deposited, along with the number of successful calls made'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'and the error of the failed call. If all were successful, then the `BatchCompleted`'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'event is deposited.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Blocco numero 10092909
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'contribute'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(3) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 1 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(2) [
    [String (Text): 'Contribute to a crowd sale. This will transfer some balance over to fund a parachain'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'slot. It will be withdrawable when the crowdloan has ended and the funds are unused.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(3) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Blocco numero 10092910
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'batch_all'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 2 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(14) [
    [String (Text): 'Send a batch of dispatch calls and atomically execute them.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The whole transaction will rollback and fail if any of the calls failed.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'May be called from any origin.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `calls`: The calls to be dispatched from the same origin. The number of call must not'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  exceed the constant: `batched_calls_limit` (available in constant metadata).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'If origin is root then call are dispatch without checking origin filter. (This includes'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'bypassing `frame_system::Config::BaseCallFilter`).'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- Complexity: O(C) where C is the number of calls to be batched.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'contribute'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(3) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 1 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(2) [
    [String (Text): 'Contribute to a crowd sale. This will transfer some balance over to fund a parachain'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'slot. It will be withdrawable when the crowdloan has ended and the funds are unused.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(3) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Blocco numero 10092911
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Blocco numero 10092912
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Blocco numero 10092913
Type(5) [Map] {
  'name' => [String (Text): 'set'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(16) [
    [String (Text): 'Set the current time.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'This call should be invoked exactly once per block. It will panic at the finalization'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): "phase, if this call hasn't been invoked by that time."] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The timestamp should be greater than the previous one by the amount specified by'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '`MinimumPeriod`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): 'The dispatch origin for this call must be `Inherent`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '  `on_finalize`)'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- 1 event handler `on_timestamp_set`. Must be `O(1)`.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'enter'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 0 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(1) [
    [String (Text): 'Enter the paras inherent. This will process bitfields and backed candidates.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
Type(5) [Map] {
  'name' => [String (Text): 'remark'] {
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined
  },
  'fields' => Vec(1) [
    Type(4) [Map] {
      'name' => [Option],
      'type' => [Type],
      'typeName' => [Option],
      'docs' => [Vec],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter],
      typeName: [Getter],
      docs: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type]
  ],
  'index' => u8 {
    negative: 0,
    words: [ 1 ],
    length: 1,
    red: null,
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    __UIntType: 'u8'
  },
  'docs' => Vec(5) [
    [String (Text): 'Make some on-chain remark.'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): ''] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# <weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '- `O(1)`'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    [String (Text): '# </weight>'] {
      registry: [TypeRegistry],
      createdAtHash: undefined
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Text extends String]
  ],
  'args' => Vec(1) [
    Type(2) [Map] {
      'name' => [Text],
      'type' => [Type],
      registry: [TypeRegistry],
      createdAtHash: undefined,
      name: [Getter],
      type: [Getter]
    },
    registry: TypeRegistry { createdAtHash: undefined },
    createdAtHash: undefined,
    _Type: [class Type extends Type]
  ],
  registry: TypeRegistry { createdAtHash: undefined },
  createdAtHash: undefined,
  name: [Getter],
  fields: [Getter],
  index: [Getter],
  docs: [Getter],
  args: [Getter]
}
