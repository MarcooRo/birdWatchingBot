version: '3.2'
services:
  
  nodejs:
    build: 
      context: .
      dockerfile: Dockerfile1
    image: albertorotondo/nodejsapp
    networks:
      - frontend  
      - backend
    volumes:
      - ./catchEvent:/usr/app/catchEvent
    ports:
      - "8001:80"

  bot2-0-0:
    build: 
      context: .
      dockerfile: Dockerfile2
    image: albertorotondo/botjsapp1
    networks:
      - frontend  
      - backend
    environment:
      - MYSQL_HOST=myapp_mysql
      - MYSQL_USER=KanUser
      - MYSQL_PASSWORD=rootPass1803
      - MYSQL_DB=ProgettoHackaton
    volumes:
      - ./bot2-0-0:/usr/app/bot2-0-0
      
  bot1-0-0:
    build: 
      context: .
      dockerfile: Dockerfile4
    image: albertorotondo/botjsapp2
    networks:
      - frontend  
      - backend
    environment:
      - MYSQL_HOST=myapp_mysql
      - MYSQL_USER=KanUser
      - MYSQL_PASSWORD=rootPass1803
      - MYSQL_DB=ProgettoHackaton
    volumes:
      - ./bot1-0-0:/usr/app/bot1-0-0


  mysql2-0-0:
    image: mysql:5.7
    networks:
      - backend
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_USER=moeuser
      - MYSQL_PASSWORD=moepass
      - MYSQL_DATABASE=progettoHackaton
    volumes:
      - db1:/var/lib/mysql
    container_name: myapp2

  mysql1-0-0:
    image: mysql:5.7
    networks:
      - backend
      - frontend
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_USER=moeuser
      - MYSQL_PASSWORD=moepass
      - MYSQL_DATABASE=progettoHackaton
    volumes:
      - db2:/var/lib/mysql
    container_name: myapp1

  phpmyadmin1:
    image: phpmyadmin/phpmyadmin:4.7
    depends_on:
      - mysql2-0-0
    networks:
      - backend
      - frontend
    ports:
      - "8002:80"
    environment:
      - PMA_HOST=myapp1
      - PMA_PORT= 3306
    volumes:
      - /sessions

  phpmyadmin2:
    image: phpmyadmin/phpmyadmin:4.7
    depends_on:
      - mysql1-0-0
    networks:
      - backend
    ports:
      - "8003:80"
    environment:
      - PMA_HOST=myapp2
      - PMA_PORT= 3306
    volumes:
      - /sessions

networks:
  frontend:
  backend:

volumes:
  db1:
  db2: